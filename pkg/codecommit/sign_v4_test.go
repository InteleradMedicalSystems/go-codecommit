package codecommit

import (
	"net/url"
	"testing"
	"time"

	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/endpoints"
)

const (
	// Pre-computed valid signature for testing SigningCtx.signCodeCommitRequest()
	expectedSignature = "20060102T150405Ze753c5ee547434cdf4ec3a250f51e07042cf5263ba81bb3be86d0d062f62427b"
)

// TestNewSigningContext test that the pre-computed signature is generated by SigningContext.signCodeCommitRequest()
func TestNewSigningContext(t *testing.T) {
	u, _ := url.Parse("https://git-codecommit.ca-central-1.amazonaws.com/v1/repos/test-lcc2")

	accessKeyID := "AKID"
	secretAccessKey := "SECRET"
	credValues := credentials.Value{
		AccessKeyID:     accessKeyID,
		SecretAccessKey: secretAccessKey,
		SessionToken:    "",
	}
	region := "ca-central-1"
	serviceName := endpoints.CodecommitServiceID

	tf := "20060102T150405"
	// get a new Time instance for a specific datetime from a string like `tf`
	signTime, err := time.Parse(tf, tf)
	if err != nil {
		t.Fatalf("Failed to parse time %v (err: %v)", tf, err)
	}

	ctx := NewSigningContext(u, region, serviceName, credValues, signTime)
	actual := ctx.signCodeCommitRequest()
	expected := expectedSignature
	if expected != actual {
		t.Fatalf("Expected signature %v, actual %v", expected, actual)
	}
}
